{"repository_name":"prop","body":"# Prop\n\n[![CI Status](https://github.com/Nicolab/crystal-prop/workflows/CI/badge.svg?branch=master)](https://github.com/Nicolab/crystal-prop/actions) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-prop.svg)](https://github.com/Nicolab/crystal-prop/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-prop/)\n\nProperties utilities for Crystal lang.\n\nMixin module that should be included in a class or a struct.\nThis module improves the std's accessor macros (`getter`, `getter!`, `getter?`, `property`, ...).\nIt provide a kind of IoC (Inversion Of Control).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\n   dependencies:\n     prop:\n       github: nicolab/crystal-prop\n```\n\n2. Run `shards install`\n\n## Usage\n\nðŸ“˜ [API doc](https://nicolab.github.io/crystal-prop/).\n\n> If you are looking for a validator to validate data before instantiating a class or a struct,\n  you may be interested by [validator](https://github.com/Nicolab/crystal-validator).\n  This [validator](https://github.com/Nicolab/crystal-validator) shard uses `Prop` internally\n  to define and handle validation rules on each instance variable.\n\n## Development\n\nInstall dev dependencies:\n\n```sh\nshards install\n```\n\nRun:\n\n```sh\ncrystal spec\n```\n\nClean before commit:\n\n```sh\ncrystal tool format\n./bin/ameba\n```\n\n## Contributing\n\n1. Fork it (https://github.com/Nicolab/crystal-prop/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-prop/blob/master/LICENSE) (c) 2021, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"prop/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"prop","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"prop/Prop","path":"Prop.html","kind":"module","full_name":"Prop","name":"Prop","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/prop.cr","line_number":59,"url":"https://github.com/Nicolab/crystal-prop/blob/c3efc7d20f47a6473c5ca427cde43e2c576833ac/src/prop.cr#L59"}],"repository_name":"prop","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Prop utilities.\n\nMixin module that should be included in a class or a struct.\nThis module improves the std's accessor macros (`getter`, `getter!`, `getter?`, `property`, ...).\n\nIf a block is defined to an instance variable, it will be executed on the\ninitialization of the instance (called by each `initialize`).\n\n```\nproperty my_var : String = \"default value\" do |default_value|\n  # Remove leading and trailing whitespace\n  # \"    hello    \".strip # => \"hello\"\n  @my_var = @my_var.strip\nend\n```\n\nYou can provide arguments:\n\n```\nproperty my_var : String = \"default value\", \"any type of argument\" do |default_value, args|\n  puts args\n  @my_var = @my_var.strip\nend\n```\n\nThe behavior can easily be extended:\n\n```\nmodule CustomProp\n  macro included\n    include Prop\n\n    macro finished\n      {% verbatim do %}\n        {% for k, prop in PROPS %}\n          {% if prop[:args] %}\n            some_ioc_method({{prop[:name]}}: { {{prop[:args].double_splat}} })\n          {% end %}\n        {% end %}\n      {% end %}\n    end\n  end\nend\n```\n\nSee [README](https://github.com/Nicolab/crystal-prop/) for more details.\n\n> If you are looking for a validator to validate data before instantiating a class or a struct,\n  you may be interested by [validator](https://github.com/Nicolab/crystal-validator).\n  This [validator](https://github.com/Nicolab/crystal-validator) shard uses `Prop` internally\n  to define and handle validation rules on each instance variable.","summary":"<p>Prop utilities.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}}